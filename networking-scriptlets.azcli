# VARIABLES
loc="eastus"
rg="vwan-lab"


# RESOURCE GROUP
#
# list all resources in a resource group
az resource list --query "[?resourceGroup=='$rg'].{ name: name, flavor: kind, Resourcetype: type, region: location }" -o table

# create a resource group
az group create -n $rg -l $loc

# delete a resource group and all resources
az group delete -n $rg -l $loc

# VIRTUAL MACHINES
#
# create an Ubuntu VM
vmname="testvm1"
username="azureuser"
password="MyP@ssword123"
az vm create -n $vmname -g $rg --image ubuntults --public-ip-sku Standard --size Standard_D2S_v3 --subnet default --vnet-name exrHub --admin-username $username --admin-password $password

# show VM status details and ips
az vm show -g $rg -n CSR --show-details -o table

# get VM sizes
az vm list-sizes -l $loc -o table

# update SSH rule to source from current IP only
mypip=$(curl -4 ifconfig.io -s)
az network nsg rule update -g $rg --nsg-name $vmname'NSG' -n 'default-allow-ssh' --source-address-prefixes $mypip

# list vm images available in the gallery
az vm image list --all -f UbuntuServer -p Canonical -l eastus -o table
az vm list-sizes --location westeurope -o table

# create a Cisco CSR
#
username="azureuser"
password="MyP@ssword123"
az vm image terms accept --urn cisco:cisco-csr-1000v:17_3_4a-byol:latest
az network vnet create --resource-group $rg --name nvaVnet --location $loc --address-prefixes 10.1.0.0/16 --subnet-name nva --subnet-prefix 10.1.10.0/24
az network vnet subnet create --address-prefix 10.1.0.0/24 --name untrust --resource-group $rg --vnet-name nvaVnet
az network vnet subnet create --address-prefix 10.1.1.0/24 --name trust --resource-group $rg --vnet-name nvaVnet
az network public-ip create --name CSRPublicIP --resource-group $rg --idle-timeout 30 --allocation-method Static
az network nic create --name CSROutsideInterface --resource-group $rg --subnet untrust --vnet nvaVnet --public-ip-address CSRPublicIP --ip-forwarding true
az network nic create --name CSRInsideInterface --resource-group $rg --subnet trust --vnet nvaVnet --ip-forwarding true
# make sure you downloaded bootstrap.txt to the local directory first
az vm create --resource-group $rg --location $loc --name CSR --size Standard_D2_v2 --nics CSROutsideInterface CSRInsideInterface  --image cisco:cisco-csr-1000v:17_3_4a-byol:latest --admin-username $username --admin-password $password --custom-data bootstrap.txt

# BASTION
#
# create bastion remote access
az network public-ip create --name bastion-pip --resource-group $rg -l $loc --sku Standard
az network bastion create -g $rg -n bastion --public-ip-address bastion-pip --vnet-name nvaVnet -l $loc

# STORAGE ACCOUNT
#
# create a storage account
az storage account create -n vwanconfig -g $rg -l $loc --sku Standard_LRS
key=$(az storage account keys list -g $rg --account-name vwanconfig --query '[0].value' -o tsv)
az storage container create -n config -g $rg --account-name vwanconfig --account-key $key
sas=$(az storage container generate-sas --account-key $key --account-name vwanconfig --expiry 2023-01-01 --name config --permissions aclrw -o tsv)


# EXPRESSROUTE
#
# create an expressroute circuit
az network express-route create -g exrvpn -n exr-circuit --bandwidth 50Mbps --peering-location "Washington DC" --provider "Megaport" -l $loc --sku-family MeteredData --sku-tier Standard

# get list of locations by name and address in a table
az network express-route port location list --query "[].{location:name, address:address}" -o table

# get list of locations that contain a particular name
az network express-route port location list --query "[? contains(address, 'Ashburn')].{location:name, address:address}" -o table

# get the details for a particular location, the bandwidths available in that location
az network express-route port location show --location "Equinix-Ashburn-DC2" --query "availableBandwidths" -o table


# VIRTUAL NETWORK
#
# create a virtual network
az network vnet create --address-prefixes 10.100.0.0/16 -n spokeVnet -g $rg --subnet-name main --subnet-prefixes 10.100.0.0/24

# create a subnet with NSG assigned
az network vnet subnet create -g $rg --vnet-name spokeVnet -n MySubnet --address-prefixes 10.0.0.0/24 --network-security-group MyNsg

# create NSG
az network nsg create -g $rg -n MyNsg 

# create NSG rule for port 22 with current source IP
mypip=$(curl -4 ifconfig.io -s)
az network nsg rule create -n SSH --nsg-name MyNsg --priority 300 -g $rg --direction Inbound --protocol TCP --source-address-prefixes $mypip --destination-port-ranges 22


# VIRTUAL NETWORK GATEWAY (VPN)
#
# create standard public ips
az network public-ip create -n remote1GW1-pip -g $rg --location $loc --sku Standard
az network public-ip create -n remote1GW2-pip -g $rg --location $loc --sku Standard

# create vpn gateway active / active with BGP enabled
az network vnet-gateway create -n remote1GW --public-ip-addresses remote1GW1-pip remote1GW2-pip -g $rg --vnet remote1Vnet --asn 65510 --gateway-type Vpn -l $loc --sku VpnGw2 --vpn-gateway-generation Generation2 --no-wait

# get public ip address and bgp peer ip's
bgp1=$(az network vnet-gateway show -n remote1GW -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv)
pip1=$(az network vnet-gateway show -n remote1GW -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv)

# create connection from vpn gw to local gateway and watch for connection succeeded
az network local-gateway create -g $rg -l $loc -n site-east-LG --gateway-ip-address $vwanpip1 --asn 65515 --bgp-peering-address $vwanbgp1
az network vpn-connection create -n remote1gwTOvwansite1 -g $rg -l $loc --vnet-gateway1 remote1GW --local-gateway2 site-east-LG --enable-bgp --shared-key 'abc123'
watch -n 5 az network vpn-connection show -g $rg -n remote1gwTOvwansite1 --query connectionStatus -o tsv

# get VPN Gateway provisioning status
prState=''
# bash format: while [ $prState -ne 'Succeeded' ]
while [[ $prState != 'Succeeded' ]]; #zsh
do
    prState=$(az network vnet-gateway show -g vwan-vpn -n branchWestGW --query provisioningState -o tsv)
    echo "branchWestGW provisioningState="$prState
    sleep 5
done

# FIREWALL
#
# create a firewall policy
az network firewall policy create -g $rg -n fw-default-policy -l $loc --sku Standard

# create a firewall policy rule collection group
az network firewall policy rule-collection-group create -g $rg -n DefaultNetworkRuleCollectionGroup --priority 300 --policy-name fw-default-policy

# create first network rule
az network firewall policy rule-collection-group collection add-filter-collection \
 --resource-group $rg \
 --policy-name fw-default-policy \
 --name NetworkRules \
 --rcg-name DefaultNetworkRuleCollectionGroup \
 --rule-type NetworkRule \
 --rule-name AnyRFC1918only \
 --action Allow \
 --ip-protocols "Any" \
 --source-addresses 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 \
 --destination-addresses  10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 \
 --destination-ports "*" \
 --collection-priority 100

# add a network rule
az network firewall policy rule-collection-group collection rule add \
 --resource-group $rg \
 --collection-name NetworkRules \
 --name 10NetInternet-WebOnly \
 --policy-name fw-default-policy \
 --rcg-name DefaultNetworkRuleCollectionGroup \
 --rule-type NetworkRule \
 --ip-protocols "TCP" \
 --source-addresses 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 \
 --destination-addresses "*" \
 --destination-ports 80 443

# associate policy with existing secured hub firewall
az network firewall update -g $rg -n AzureFirewall_easthub --firewall-policy fw-default-policy --vhub easthub

# create a secure hub firewall
az network firewall create -n easthub-fw -g $rg -l $loc --sku AZFW_Hub --virtual-hub eastHub --public-ip-count 1 --tier Standard

# turn on diagnostic settings for Azure Firewall -- log all metrics
az monitor diagnostic-settings create -n AzFWLogAll  \
--resource 'resourceID'  \
--workspace 'logAnalyticWorkspaceID' \
--logs '[
    {  
        "category": "AzureFirewallApplicationRule", 
        "enabled": true 
    }, 
    { 
        "category": "AzureFirewallNetworkRule",
        "enabled": true 
    }, 
    { 
        "category": "AzureFirewallDnsProxy", 
        "enabled": true 
    } 
]' \
--metrics '[ 
    { 
        "category": "AllMetrics", 
        "enabled": true 
    } 
 ]'

# show info about firewall policy and rule collection group
az network firewall policy show -g vwanvpn -n EastDefaultPolicy

az network firewall policy rule-collection-group show -g $rg -n DefaultNetworkRuleCollectionGroup --policy-name EastDefaultPolicy

# VIRTUAL WAN
#
# create virtual wan
az network vwan create -g $rg -n vwanvpn --branch-to-branch-traffic true --location $loc --type Standard

# create virtual hub
az network vhub create -g $rg --name hubeast --address-prefix 10.0.0.0/24 --vwan vwanvpn --location $loc --sku Standard

# check hub provisioning and routing state
az network vhub show -g vwan-vpn -n hubeast --query 'provisioningState' -o tsv
az network vhub show -g vwan-vpn -n hubeast --query 'routingState' -o tsv

# create vnet connection to vhub
az network vhub connection create -n spoke1conn --remote-vnet spoke1Vnet -g $rg --vhub-name hubeast

# create vpn gateway
az network vpn-gateway create -n easthubvpngw -g $rg --location $loc --vhub eastHub --no-wait

# create vpn site
az network vpn-site create --ip-address $pip1 -n site-east-1 -g $rg --asn 65510 --bgp-peering-address $bgpip1 -l $loc --virtual-wan Vwan-Object --device-model 'Azure' --device-vendor 'Microsoft' --link-speed '50' --with-link true
az network vpn-site link add --ip-address $pip2 -n site-east-2 -g $rg --site-name 'site-east-1' --asn 65510 --bgp-peering-address $bgpip2 --link-provider-name 'Microsoft' --link-speed-in-mbps '50'

# get vpn gateway name and site name
vpn1=$(az network vpn-gateway list -g $rg --query '[0].{name:name}' -o tsv)
site=$(az network vpn-site show -n site-east-1 -g $rg --query id -o tsv)

# create vpn site connection
az network vpn-gateway connection create --gateway-name $vpn1 -n site-east-1-conn -g $rg --enable-bgp true --remote-vpn-site $site --internet-security --shared-key 'abc123'

# get vwan vpn gw public ip's and bgp peers
vwanbgp1=$(az network vpn-gateway show -n $vpn1 -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv)
vwanpip1=$(az network vpn-gateway show -n $vpn1 -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv)

# get VWAN VPN gateway provisioning state
prState=''
# bash format: while [ $prState -ne 'Succeeded' ]
while [[ $prState != 'Succeeded' ]]; #zsh
do
    prState=$(az network vhub show -g vwan-vpn -n hubwest --query 'provisioningState' -o tsv)
    echo "hubwest provisioningState="$prState
    sleep 5
done

# get VWAN VPN routing state
rtState=''
# bash format: while [ $prState -ne 'Succeeded' ]
while [[ $rtState != 'Provisioned' ]]; #zsh
do
    rtState=$(az network vhub show -g vwan-vpn -n hubwest --query 'routingState' -o tsv)
    echo "hubwest routingState="$rtState
    sleep 5
done
